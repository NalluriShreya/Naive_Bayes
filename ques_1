import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset = pd.read_csv('User_Data.csv')
features = dataset.iloc[:, [2, 3]].values
target = dataset.iloc[:, 4].values

from sklearn.model_selection import train_test_split
features_train, features_test, target_train, target_test = train_test_split(features, target, test_size=0.25, random_state=0)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
features_train = scaler.fit_transform(features_train)
features_test = scaler.transform(features_test)

from sklearn.naive_bayes import GaussianNB
nb_classifier = GaussianNB()
nb_classifier.fit(features_train, target_train)

target_pred = nb_classifier.predict(features_test)

from sklearn.metrics import confusion_matrix
conf_matrix = confusion_matrix(target_test, target_pred)
print("Confusion Matrix:\n", conf_matrix)

from matplotlib.colors import ListedColormap
color_map = ListedColormap(('purple', 'green'))

train_set, train_labels = features_train, target_train
X1, X2 = np.meshgrid(np.arange(start=train_set[:, 0].min() - 1, stop=train_set[:, 0].max() + 1, step=0.01),
                     np.arange(start=train_set[:, 1].min() - 1, stop=train_set[:, 1].max() + 1, step=0.01))
plt.contourf(X1, X2, nb_classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha=0.75, cmap=color_map)
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, label in enumerate(np.unique(train_labels)):
    plt.scatter(train_set[train_labels == label, 0], train_set[train_labels == label, 1],
                color=color_map(i), label=label)
plt.title('Naive Bayes (Training set)')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()
plt.show()

test_set, test_labels = features_test, target_test
X1, X2 = np.meshgrid(np.arange(start=test_set[:, 0].min() - 1, stop=test_set[:, 0].max() + 1, step=0.01),
                     np.arange(start=test_set[:, 1].min() - 1, stop=test_set[:, 1].max() + 1, step=0.01))
plt.contourf(X1, X2, nb_classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha=0.75, cmap=color_map)
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, label in enumerate(np.unique(test_labels)):
    plt.scatter(test_set[test_labels == label, 0], test_set[test_labels == label, 1],
                color=color_map(i), label=label)
plt.title('Naive Bayes (Test set)')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()
plt.show()
